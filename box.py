import requests
from settings import BASE_URL


class BoxAuth(object):
    """A thin wrapper for the Box OAuth 2 process

    This class handles refreshing tokens, as well as getting initial tokens
    when given an authorization code. If passed an authorization code, it will
    always use that i.e. passing in an authorization code along with access and
    refresh tokens will result in the access and refresh tokens being discarded

    Get a Box client_id and client_secret here:
    http://box.com/developers/services/edit/

    See here for the full outline of the Box OAuth 2 process:
    http://developers.box.com/oauth/

    Arguments:
        client_id: a Box client_id (see above link)
        client_secret: a Box client_secret (see above link)
        code: the authorization code returned in the second leg of the OAuth 2
            process
        access_token: an access_token generated by the final leg of the Box
            OAuth 2 process
        refresh_token: an refresh_token generated by the final leg of the Box
            OAuth 2 process


    """

    def __init__(self, client_id, client_secret,
                 base_url=None,
                 scope=None,
                 redirect_uri=None,
                 authorize_url=None,
                 token_url=None,
                 **kwargs):

        self.client_id = client_id
        self.client_secret = client_secret
        self.base_url = base_url or BASE_URL

        if kwargs.get('code'):
            self.set_oauth_tokens(self._fetch_oauth_tokens(kwargs['code']))

        if kwargs.get('access_token') and kwargs.get('refresh_token'):
            self.access_token = kwargs.get('access_token'),
            self.refresh_token = kwargs.get('refresh_token')

    def get_authorization_url(self, redirect_uri=''):

        return '{}/authorize?response_type=code&client_id={}&redirect_uri={}'.format(
            self.base_url,
            self.client_id,
            redirect_uri
        )

    def authenticate_with_code(self, code):
        """
        Helper method to authenticate the current BoxAuth
        with an auth code
        """
        self.set_oauth_tokens(*self._fetch_oauth_tokens(code=code))

    def refresh_tokens(self):
        """
        Refreshes the current token set.
        Requires having a refresh token set on this object
        """

        if not hasattr(self, 'refresh_token'):
            raise ValueError("""
                You must first have a refresh token before
                you can refresh your current token set
            """)

        self.set_oauth_tokens(*self._fetch_oauth_tokens())

    def set_oauth_tokens(self, access_token, refresh_token):
        """
        Basic setter for the access and refresh tokens on this object
        """
        self.access_token = access_token
        self.refresh_token = refresh_token

    def _fetch_oauth_tokens(self, raw=False, code=None):
        """
        Used to make token requests to the Box OAuth2 Endpoint

        Args:
            raw: If True, returns the complete dict returned from the oauth
                process otherwise, will return ACCESS_TOKEN, REFRESH_TOKEN

            and ONE of:
            code
            refresh_token
        """
        oauth_data = {}

        # We need an authorization code or refresh token to get an access token
        if not code and not hasattr(self, 'refresh_token'):
            raise ValueError("""
                A refresh_token must be set on the object or code must be
                passed in as an argument to refresh tokens
            """)

        # Set the grant type based on whether an authorization code
        # or refresh token is passed in
        if code is not None:
            oauth_data.update({
                'grant_type': 'authorization_code',
                'code': code
            })
        else:
            oauth_data.update({
                'grant_type': 'refresh_token',
                'refresh_token': self.refresh_token
            })

        oauth_data.update({
            'client_id': self.client_id,
            'client_secret': self.client_secret
        })

        token_url = '{}/token'.format(self.base_url)
        token_response = requests.post(token_url, data=oauth_data)

        if token_response.status_code != requests.codes.ok:
            print 'Code for client_id {} failed'.format(self.client_id)
            return None, None

        if raw:
            return token_response.json()
        else:
            return (
                token_response.json().get('access_token'),
                token_response.json().get('refresh_token')
            )

    def revoke_tokens(self):
        """
        Invalidate the current access and refresh tokens
        """
        if hasattr(self, 'access_token'):
            revoke_data = {
                'client_id': self.client_id,
                'client_secret': self.client_secret,
                'token': getattr(self, 'access_token', '')
            }
            revoke_url = '{}/revoke'.format(self.base_url)
            requests.post(revoke_url, data=revoke_data)
        return
